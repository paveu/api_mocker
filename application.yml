version: "3"

services:
  web:
    image: docker.io/paveu/apimocker:latest
    command: /base/entry web
#    ports:
#      - "8000:8443"
    networks:
      - balancer_public
    depends_on:
      - cache
      - celery
    volumes:
      - .:/app
    environment:
      # Values present in the environment at runtime will always override those defined inside the .env file.
      # Similarly, values passed via command-line arguments take precedence as well.
      # .env file must be created with following env variables
      - ENVIRONMENT=production
      - DATABASE_MOCKER_URL
      - RAVEN_CONFIG_DSN
    deploy:
      labels:
        - "traefik.backend=web"
        - "traefik.port=8443"
        - "traefik.frontend.rule=PathPrefixStrip:/"
        - "traefik.frontend.rule=Host:web.example.org"
        - "traefik.docker.network=balancer_public"
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  cache:
    image: redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    networks:
      - balancer_public
    volumes:
      # Make sure your shell is configured to talk to default.
      # Create a ./data directory on the manager:
      # docker-machine ssh default "mkdir ./data"
      # The volume you created that lets the container access ./data (on the host)
      # as /data (inside the Redis container). While containers come and go,
      # the files stored on ./data on the specified host will persist, enabling continuity.
      - esdata:/redis_data
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]
  celery:
    image: docker.io/paveu/apimocker:latest
    command: /base/entry celery_worker_and_beat
    networks:
      - balancer_public
    depends_on:
      - cache
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=production
      - DATABASE_MOCKER_URL
      - RAVEN_CONFIG_DSN
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
  portainer:
    image: portainer/portainer
    networks:
      - balancer_public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 1
      labels:
        - "traefik.backend=portainer"
        - "traefik.port=9000"
        - "traefik.frontend.rule=PathPrefixStrip:/portainer/"
        - "traefik.frontend.rule=Host:portainer.example.org"
        - "traefik.docker.network=balancer_public"
      placement:
        constraints: [node.role == manager]
  elasticsearch:
    hostname: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.3
    networks:
      - balancer_public
    volumes:
      - ./apimocker/settings/external/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - esdata:/usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: '-Xms256m -Xmx256m'
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
#        constraints:
#          - node.hostname == myvm1
  logstash:
    hostname: logstash
    image: docker.elastic.co/logstash/logstash:5.6.3
    command: -f /usr/share/logstash/pipeline/logstash.conf
    ports:
        - "5000:5000/tcp"
        - "5044:5044/tcp"
        - "5000:5000/udp"
        - "5044:5044/udp"
    depends_on:
      - elasticsearch
    networks:
      - balancer_public
    volumes:
        - ./apimocker/settings/external/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
        - ./apimocker/settings/external/logstash/pipeline/patterns:/etc/logstash/patterns.d
        - ./apimocker/settings/external/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
  kibana:
    image: docker.elastic.co/kibana/kibana:5.6.3
#    ports:
#      - '5601:5601'
    depends_on:
      - elasticsearch
    networks:
      - balancer_public
    volumes:
      - ./apimocker/settings/external/kibana/config:/usr/share/kibana/config
    deploy:
      replicas: 1
      labels:
        - "traefik.backend=kibana"
        - "traefik.port=5601"
        - "traefik.frontend.rule=PathPrefixStrip:/kibana/"
        - "traefik.frontend.rule=Host:kibana.example.org"
        - "traefik.docker.network=balancer_public"
      placement:
        constraints: [node.role == manager]

networks:
  balancer_public:
    external: true

volumes:
  esdata:
    driver: local